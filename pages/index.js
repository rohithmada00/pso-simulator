import Head from 'next/head'
import topButtons from '../components/top_buttons';

import rightTable from '../components/right_table';
//import graph from '../components/graph';

import Chart from 'chart.js/auto';
import {Bubble} from 'react-chartjs-2';


import { useRef } from 'react';




export default function Home() {
    
    var isStarted = false;
      var data = {
        datasets: [{
          label: 'First Dataset',
          data: [],
          backgroundColor: 'rgb(255, 99, 132)'
        }]
      };

      const options = {
        scales: {
            x: {
  
              min: -6,
              max: 6,
  
            },
            y: {
              
              min: -6,
              max: 6,
              
            },
          },
      };

      var particles=[];
      var Xbest;
      var Fbest;

    const bubbleChart = useRef(null);
      
  return (
    <div classNameName="container">
      <Head>
        <title>PSO simulation </title>
        <meta name="description" content="Generated by create next app" />
        <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.1/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-iYQeCzEYFbKjA/T2uDLTpkwGzCiq6soy8tYaI1GyVh/UjpbCx/TYkiZhlZB6+fzT" crossorigin="anonymous" />
        {/* <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.1/dist/js/bootstrap.bundle.min.js" integrity="sha384-u1OknCvxWvY5kfmNBILK2hRnQC3Pr17a+RTT6rIHI7NnikvbZlHgTPOOmMi466C8" crossorigin="anonymous"></script>
        <script src="https://cdn.jsdelivr.net/npm/chart.js"></script> */}
        
      </Head>

      <main>   
      <nav className="navbar navbar-expand-lg navbar-dark bg-primary  ">
            <div className="container ">
                <a className="navbar-brand" href="#">PSO Simulator</a>
            </div>
            
        </nav>

        <div className="container ">
            <div className="row">
                <div className="col-sm-2">
                <div className="row toolbar">
                <div className="col-9">
                    <div className="row">
                        <div className="col-9">
                            <div className="btn-group" role="group">
                                <button type="button" className="btn btn-success btn-sm btn-play" onClick={PSO}>Play</button>
                                <button type="button" className="btn btn-success btn-sm btn-step" onClick={update}> Step</button>
                                <button type="button" className="btn btn-success btn-sm btn-stop" disabled><i className="fas fa-stop"></i> Stop</button>
                                <button type="button" className="btn btn-success btn-sm btn-restart" onClick={restart}>Restart</button>
                            </div>
                        </div>
                        <div className="col-3">
                            
                        </div>
                    </div>
                </div>
                <div className="col-3">
                </div>
            </div>
                  {/* <button onClick={PSO}>abc</button>
                  <button onClick={update}>step</button> */}
                </div>
                <div className="col-sm-6">
                    <Bubble ref={bubbleChart}
                        options={options}
                        data={data}
                        width={400}
                        height={400}
                    />
                </div>
                <div className="col-sm-4">
                    {rightTable()}
                    <br />
                </div>
            </div>
        </div>    
      </main>
    </div>
  )

function restart(){
    particles= [];
    const b_chart = bubbleChart.current;
    b_chart.data.datasets[0].data=[];
    b_chart.update();
    PSO();
}

function PSO(){
    isStarted= true;
   const population=40;
   for(var i=0;i<population;i++){
       particles.push(new Particle());
       const b_chart = bubbleChart.current;
       b_chart.data.datasets[0].data.push({
           x:particles[i].X[0],
           y:particles[i].X[1],
           r:2,
         });
       b_chart.update();
   }
   Xbest = particles[0].Xbest;
   Fbest = particles[0].fbest;
}

function x(){
    for(var i=0;i<100;i++){
        update();
    }
}

function update(){
  
    if(isStarted){
        const c1=2.05;
        const c2=2.05;
        var r1;
        var r2;
        const w=0.4;
        const population=40;
        const dim = 2
        const minv=-1;
        const maxv=1;
        const minx=-5;
        const maxx=5;
    
        for(var i=0;i<population;i++){
            if(Fbest > particles[i].fbest){
                Fbest=particles[i].fbest;
                Xbest=particles[i].Xbest;
            }
        }
    
        for(var i=0;i<population;i++){
            for(var j=0;j<dim;j++){
                r1=Math.random();
                r2=Math.random();
    
                particles[i].V[j] = (w*particles[i].V[j]  +  c1*r1*(particles[i].Xbest[j]-particles[i].X[j])  +  c2*r2*(Xbest[j]-particles[i].X[j])); 
    
                if(particles[i].V[j] < minv){
                    particles[i].V[j] = minv;
                }
                else if(particles[i].V[j] > maxv){
                    particles[i].V[j] = maxv;
                }
            }
            
            for(var j=0;j<dim;j++){
                particles[i].X[j]+=particles[i].V[j];
                if(particles[i].X[j] < minx){
                    particles[i].X[j] = minx;
                }
                else if(particles[i].X[j] > maxx){
                    particles[i].X[j] = maxx;
                }
            }

            const b_chart = bubbleChart.current;
            b_chart.data.datasets[0].data[i]=({
                 x:particles[i].X[0],
                 y:particles[i].X[1],
                 r:2,
                 });
    
            b_chart.update();

            particles[i].updateFitness();
            if(Fbest > particles[i].Vbest){
                Fbest=particles[i].fbest;
                Xbest=particles[i].Xbest;
            }
        }
    }

}

}





class Particle{

    constructor(dim = 2){
        this.dim = dim;

        this.X = [];
        this.V = [];

        for(var i=0;i<dim;i++){
            this.X.push(Math.random()*(10)-5);
            this.V.push(Math.random()*2-1);
        }

        this.fbest = this.fitness();
        this.Xbest = this.X;
    }

    updateFitness(){
        if(this.fitness() < this.fbest){
            this.fbest = this.fitness();
            this.Xbest = this.X;
        }
    }

    fitness(){
        return this.X[0]+this.X[1];
    }

};


