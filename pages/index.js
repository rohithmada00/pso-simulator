import Head from 'next/head'
import topButtons from '../components/top_buttons';

import rightTable from '../components/right_table';
//import graph from '../components/graph';

import Chart from 'chart.js/auto';
import {Bubble} from 'react-chartjs-2';


import { useRef } from 'react';




export default function Home() {

    var flag = false;
    
      var data = {
        datasets: [{
          label: 'First Dataset',
          data: [],
          backgroundColor: 'rgb(255, 99, 132)'
        }]
      };

      const config = {
        type: 'bubble',
        data: data,
        options: {}
      };

    const bubbleChart = useRef(null);
      
  return (
    <div classNameName="container">
      <Head>
        <title>PSO simulation </title>
        <meta name="description" content="Generated by create next app" />
        <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.1/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-iYQeCzEYFbKjA/T2uDLTpkwGzCiq6soy8tYaI1GyVh/UjpbCx/TYkiZhlZB6+fzT" crossorigin="anonymous" />
        <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.1/dist/js/bootstrap.bundle.min.js" integrity="sha384-u1OknCvxWvY5kfmNBILK2hRnQC3Pr17a+RTT6rIHI7NnikvbZlHgTPOOmMi466C8" crossorigin="anonymous"></script>
        <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
        
      </Head>

      <main>   
      <nav className="navbar navbar-expand-lg navbar-dark bg-primary  ">
            <div className="container ">
                <a className="navbar-brand" href="#">PSO Simulator</a>
            </div>
            
        </nav>

        <div className="container ">
            <div className="row">
                <div className="col-sm-2">
                  {topButtons()}
                  <button onClick={PSO}>abc</button>
                  <button onClick={toggleFlag}>step</button>
                </div>
                <div className="col-sm-6">
                    <Bubble ref={bubbleChart}
                        data={data}
                        width={400}
                        height={400}
                    />
                </div>
                <div className="col-sm-4">
                    {rightTable()}
                    <br />
                </div>
            </div>
        </div>    
      </main>
    </div>
  )

function toggleFlag(){
   flag=true;
}

function PSO(){
    const c1=2.05;
    const c2=2.05;
    var r1=Math.random();
    var r2=Math.random();
    const w=0.4;
    const population=5;
    const dim = 2
    var particles=[];
    const maxItr=100;
    const minx=0;
    const maxx=2*Math.PI;

   for(var i=0;i<population;i++){
       particles.push(new Particle());
       const b_chart = bubbleChart.current;
       b_chart.data.datasets[0].data.push({
           x:particles[i].V[0],
           y:particles[i].V[1],
           r:5
         });
   
       b_chart.update();
   }
   


   var Xbest = particles[0].Xbest;
   var Vbest = particles[0].Vbest;

   for(var i=0;i<population;i++){
       if(Vbest < particles[i].Vbest){
           Vbest=particles[i].Vbest;
           Xbest=particles[i].Xbest;
       }
   }

   var itr=0;
   while(itr<maxItr){
       
       for(var i=0;i<population;i++){
           for(var j=0;j<dim;j++){
               r1=Math.random();
               r2=Math.random();

               particles[i].V[j] = (w*particles[i].V[j]  +  c1*r1*(particles[i].Xbest[j]-particles[i].X[j])  +  c2*r2*(Xbest[j]-particles[i].X[j])); 

               if(particles[i].V[j] < minx){
                   particles[i].V[j] = minx;
               }
               else if(particles[i].V[j] > maxx){
                   particles[i].V[j] = maxx;
               }
           }
           const b_chart = bubbleChart.current;
           b_chart.data.datasets[0].data[i]=({
                x:particles[i].V[0],
                y:particles[i].V[1],
                r:5
                });
   
           b_chart.update();
           //alert(itr);
           
           for(var j=0;j<dim;j++){
               particles[i].X[j]+=particles[i].V[j];
           }
           particles[i].updateFitness();
           if(Vbest < particles[i].Vbest){
               Vbest=particles[i].Vbest;
               Xbest=particles[i].Xbest;
           }
       }
       itr++;
   }

   return Xbest;
}

}





class Particle{

    constructor(dim = 2){
        this.dim = dim;

        this.X = [];
        this.V = [];

        for(var i=0;i<dim;i++){
            this.X.push(Math.random()*(2*Math.PI));
            this.V.push(Math.sin(this.X[i]));
        }

        this.Vbest = this.X;
        this.Xbest = this.V;
    }

    updateFitness(){
        if(this.fitness() < this.Vbest){
            this.Vbest = X;
            this.Xbest = V;
        }
    }

    fitness(){
        return this.V[0]+this.V[1];
    }

};


